Events within Sysmon are stored in Applications and Services Logs/Microsoft/Windows/Sysmon/Operational



To install it: Download-SysInternalsTools C:\Sysinternals
You need to use this configuration file: https://github.com/SwiftOnSecurity/sysmon-config

STARTING SYSMON: You need to specify the location of the configuration file:
	Sysmon.exe -accepteula -i ..\Configuration\swift.xml

The event log is located under Applications and Services Logs/Microsoft/Windows/Sysmon/Operational

FILTERING EVENTS WITH POWERSHELL

	Filter by Event ID: */System/EventID=<ID>

	Filter by XML Attribute/Name: */EventData/Data[@Name="<XML Attribute/Name>"]

	Filter by Event Data: */EventData/Data=<Data>

	We can put these filters together with various attributes and data to get the most control out of our logs. Look below for an example of using Get-WinEvent to look for network connections coming from port 4444.
		Get-WinEvent -Path <Path to Log> -FilterXPath '*/System/EventID=3 and */EventData/Data[@Name="DestinationPort"] and */EventData/Data=4444'

	Get-WinEvent -Path <Path to evtx file> -FilterXPath '*/System/EventID=3' | Measure-Object

	Get-WinEvent â€“Path <Path to evtx file> -FilterXPath '*/System/EventID=3' -Oldest -MaxEvent 1 | Format-List


HUNTING METASPLOIT:
	Look for connection from ports 4444 and 5555

	<RuleGroup name="" groupRelation="or">
	<NetworkConnect onmatch="include">
			<DestinationPort condition="is">4444</DestinationPort>
			<DestinationPort condition="is">5555</DestinationPort>
		</NetworkConnect>
	</RuleGroup>


HUNTING FOR OPEN PORTS WITH POWERSHELL
	Get-WinEvent -Path <Path to Log> -FilterXPath '*/System/EventID=3 and */EventData/Data[@Name="DestinationPort"] and */EventData/Data=4444'


DETECTING MIMIKATZ
	Look for file named mimikatz:
		<RuleGroup name="" groupRelation="or">
			<FileCreate onmatch="include">
				<TargetFileName condition="contains">mimikatz</TargetFileName>
			</FileCreate>
		</RuleGroup>
	
	Use the ProcessAccess event ID to hunt for abnormal LSASS behavior.
	If LSASS is accessed by a process other than svchost.exe it should be considered suspicious 
		<RuleGroup name="" groupRelation="or">
			<ProcessAccess onmatch="include">
			       <TargetImage condition="image">lsass.exe</TargetImage>
			</ProcessAccess>
		</RuleGroup>

	We can alter our config to exclude events with the SourceImage event coming from svhost.exe.
		<RuleGroup name="" groupRelation="or">
			<ProcessAccess onmatch="exclude">
				<SourceImage condition="image">svchost.exe</SourceImage>
			</ProcessAccess>
			<ProcessAccess onmatch="include">
				<TargetImage condition="image">lsass.exe</TargetImage>
			</ProcessAccess>
		</RuleGroup>

DETECTING LSASS BEHAVIOR WITH POWERSHELL
	Get-WinEvent -Path <Path to Log> -FilterXPath '*/System/EventID=10 and */EventData/Data[@Name="TargetImage"] and */EventData/Data="C:\Windows\system32\lsass.exe"'


HUNTING PERSISTENCE
	File being placed in the \Startup\ or \Start Menu directories
		<RuleGroup name="" groupRelation="or">
			<FileCreate onmatch="include">
				<TargetFilename name="T1023" condition="contains">\Start Menu</TargetFilename>
				<TargetFilename name="T1165" condition="contains">\Startup\</TargetFilename>
			</FileCreate>
		</RuleGroup>
	
HUNTING REGISTRY KEY PERSISTENCE
	Look for a registry modification that adjusts that places a script inside CurrentVersion\Windows\Run and other registry locations. 


HUNTING ALTERNATE DATA STREAMS
	Event ID 15 will hash and log any NTFS Streams that are included within the Sysmon configuration file. This will allow us to hunt for malware that evades detections using ADS. To aid in hunting ADS we will be using the SwiftOnSecurity Sysmon configuration file. The code snippet below will hunt for files in the Temp and Startup folder as well as .hta and .bat extension.
		<RuleGroup name="" groupRelation="or">
			<FileCreateStreamHash onmatch="include">
				<TargetFilename condition="contains">Downloads</TargetFilename>
				<TargetFilename condition="contains">Temp\7z</TargetFilename>
				<TargetFilename condition="ends with">.hta</TargetFilename>
				<TargetFilename condition="ends with">.bat</TargetFilename>
			</FileCreateStreamHash>
		</RuleGroup>

	Listing Data Streams:
		dir /r


DETECTING REMOTE THREADS 
	Remote threads are created using the Windows API CreateRemoteThread and can be accessed using OpenThread and ResumeThread
		<RuleGroup name="" groupRelation="or">
			<CreateRemoteThread onmatch="exclude">
				<SourceImage condition="is">C:\Windows\system32\svchost.exe</SourceImage>
				<TargetImage condition="is">C:\Program Files (x86)\Google\Chrome\Application\chrome.exe</TargetImage>
			</CreateRemoteThread>
		</RuleGroup>

DETECTING EVASION TECHNIQUES WITH POWERSHELL
	Get-WinEvent -Path <Path to Log> -FilterXPath '*/System/EventID=8'









